#define FFT_SIZE 1024
#define FFT_UNIFORM 64

float time : TIME<bool SyncInEditMode=true;>;

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float2 ViewportOffset  = (float2(0.5,0.5) / ViewportSize);
static float2 ViewportOffset2 = (float2(1.0,1.0) / ViewportSize);
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

texture ScnMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {1.0,1.0};
	string Format = "R8G8B8";
>;
sampler ScnSamp = sampler_state {
	texture = <ScnMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
texture DepthBuffer : RENDERDEPTHTARGET<
	float2 ViewportRatio = {1.0,1.0};
	string Format = "D16";
>;
texture SpectrumMap<string ResourceName = FFT_MAP_FILE;>; 
sampler SpectrumMapSamp = sampler_state
{
	texture = <SpectrumMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

#if USE_CUSTOM_PARAMS
static float mWaveBloom = waveBloom;
static float mWaveHeight = waveHeight;
static float mWaveFade = waveFade;
static float mWaveBlockSize = waveBlockSize;

static float2 mSize = size;
static float2 mTranslate = position;

static float3 mWaveColorLow = waveColorLow;
static float3 mWaveColorHigh = waveColorHigh;
static float3 mWaveColorBg = waveColorBlockBg;
#else
float mPositionXP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosX+";>;
float mPositionYP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosY+";>;
float mPositionXM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosX-";>;
float mPositionYM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosY-";>;
float mSizeX : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "SizeW-";>;
float mSizeY : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "SizeH-";>;

float mColorLowH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowH+";>;
float mColorLowS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowS+";>;
float mColorLowP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowV+";>;
float mColorLowM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowV-";>;
float mColorHighH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighH+";>;
float mColorHighS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighS+";>;
float mColorHighP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighV+";>;
float mColorHighM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighV-";>;

float mWaveBloomP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveBloom+";>;
float mWaveBloomM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveBloom-";>;
float mWaveHeightP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveHeight+";>;
float mWaveHeightM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveHeight-";>;
float mWaveFadeP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveFade+";>;
float mWaveFadeM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveFade-";>;
float mBlockSizeP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockSize+";>;
float mBlockSizeM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockSize-";>;

float mBlockColorH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorH+";>;
float mBlockColorS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorS+";>;
float mBlockColorP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorV+";>;
float mBlockColorM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorV-";>;

static float2 mSize = 1.0 - float2(mSizeX, mSizeY);
static float2 mTranslate = float2(mPositionXP, mPositionYP) - float2(mPositionXM, mPositionYM);

static float mWaveBloom = lerp(lerp(0.05, 0.5, mWaveBloomP), 0, mWaveBloomM);
static float mWaveHeight = lerp(lerp(1, 2, mWaveHeightP), 0, mWaveHeightM);
static float mWaveFade = lerp(lerp(0.5, 2.0, mWaveFadeP), 0.1, mWaveFadeM);
static float mWaveBlockSize = lerp(lerp(0.02, 0.2, mBlockSizeP), 0.0, mBlockSizeM);;

static float3 mWaveColorLow = float3(mColorLowH, mColorLowS, lerp(lerp(1, 2, mColorLowP), 0, mColorLowM));
static float3 mWaveColorHigh = float3(mColorHighH, mColorHighS, lerp(lerp(1, 2, mColorHighP), 0, mColorHighM));
static float3 mWaveColorBg = float3(mBlockColorH, mBlockColorS, lerp(lerp(1, 2, mBlockColorP), 0, mBlockColorM));
#endif

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

float2 GetFramesPerSecond(float time, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	float frame = time / 8.5 * 255;

	float y = floor(frame / size);
	float x = frame - y * size;

	return float2(x, y * uniforms) / size;
}

float GetFramesFreq(float2 coord, float samples, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	int n = samples * (uniforms * 4 - 1);

	int x = int(floor(n / 4));
	int y = int(fmod(n, 4));

	float2 lookup = coord + x * float2(0, 1.0 / size);
	float4 freqs = tex2Dlod(SpectrumMapSamp, float4(lookup, 0, 0));

	return freqs[y];
}

float4 GenWaveBg(float2 coord, float3 blockColor, float size = 0.02)
{
	coord = (coord * 0.5 + 0.5) * float2(ViewportAspect, 1);

	float s1 = fmod(coord.x, 2.0 * size);
	float s2 = fmod(coord.y, 2.0 * size);

	s1 = step(size, s1);
	s2 = step(size, s2);

#if USE_RGB_SPACE == 0
	blockColor = hsv2rgb(blockColor);
#endif

	return float4(blockColor * coord.y, s1 * s2);
}

float4 GenWave(float2 coord, float t)
{
	float fft = GetFramesFreq(GetFramesPerSecond(t), lerp(0.01, 1.0, abs(coord.x))) * mWaveHeight;
	float wave = 1 - saturate(fft);

#if USE_RGB_SPACE == 0
	mWaveColorLow = hsv2rgb(mWaveColorLow);
	mWaveColorHigh = hsv2rgb(mWaveColorHigh);
#endif

	float4 color = 1;
	color.rgb = lerp(mWaveColorHigh, mWaveColorLow, abs(coord.x));
	color.a *= mWaveBloom / abs(coord.y);
	color.a *= (1.0 + (fft * (10.0 / wave)));

	return color;
}

void SoundSpectrumVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	out float4 oTexcoord  : TEXCOORD0,
	out float4 oPosition  : POSITION)
{
	oTexcoord = Texcoord;
	oTexcoord.zw = Texcoord.xy * ViewportSize;
	oTexcoord.xy += ViewportOffset.xy;
	oPosition = Position;
}

float4 SoundSpectrumPS(in float2 coord : TEXCOORD0) : COLOR 
{
	float2 wave = smoothstep(mTranslate, mTranslate + mSize, coord) * 2 - 1;

	float4 bg = GenWaveBg(wave, mWaveColorBg, mWaveBlockSize);
	float4 front = GenWave(wave, time);
	front.a *= pow((1 - abs(wave.x)) * (1 - abs(wave.y)), mWaveFade);

	float3 screen = tex2Dlod(ScnSamp, float4(coord, 0, 0)).xyz;

	float3 color = 0;
	color += lerp(screen, bg.rgb * front.rgb, bg.a * saturate(front.a));
	color += front.rgb * front.a;
    
	return float4(color, 1);
}

float Script : STANDARDSGLOBAL <
	string ScriptOutput = "color";
	string ScriptClass  = "scene";
	string ScriptOrder  = "postprocess";
> = 0.8;

const float4 ClearColor = float4(0,0,0,0);
const float ClearDepth  = 1.0;

technique MainTech<
	string Script = 
	"RenderColorTarget=ScnMap;"
	"RenderDepthTarget=DepthBuffer;"
	"ClearSetColor=ClearColor;"
	"ClearSetDepth=ClearDepth;"
	"Clear=Color;"
	"Clear=Depth;"
	"ScriptExternal=Color;"

	"RenderColorTarget=;"
	"Pass=SoundSpectrum;"
;>{
	pass SoundSpectrum < string Script= "Draw=Buffer;"; > {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		ZEnable = False; ZWriteEnable = False;
		VertexShader = compile vs_3_0 SoundSpectrumVS();
		PixelShader  = compile ps_3_0 SoundSpectrumPS();
	}
}