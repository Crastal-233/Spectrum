#define FFT_SIZE 1024
#define FFT_UNIFORM 64

#define PI 3.141592654
#define PI_2 (3.141592654 * 2)

float time : TIME<bool SyncInEditMode=true;>;

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float2 ViewportOffset  = (float2(0.5,0.5) / ViewportSize);
static float2 ViewportOffset2 = (float2(1.0,1.0) / ViewportSize);
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

texture ScnMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {1.0,1.0};
	string Format = "R8G8B8";
>;
sampler ScnSamp = sampler_state {
	texture = <ScnMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

#if USE_CUSTOM_PARAMS
static float2 mTranslate = position;
static float3 mColorAll = colorAll;

static float mRadius = radius;
static float mIntensity = intensity;

static float mSpinCos = spinCos;
static float mSpinSin = spinSin;

static float mJitter = jitter;
#else
float mPositionXP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "PosX+";>;
float mPositionYP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "PosY+";>;
float mPositionXM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "PosX-";>;
float mPositionYM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "PosY-";>;

float mRadiusP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "Radius+";>;
float mRadiusM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "Radius-";>;
float mIntensityP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "Intensity-";>;

float mSpinCosP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "SpinCos+";>;
float mSpinCosM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "SpinCos-";>;
float mSpinSinP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "SpinSin+";>;
float mSpinSinM : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "SpinSin-";>;
float mJitterP : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "Jitter";>;

float mColorH : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "ColorAllH+";>;
float mColorS : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "ColorAllS+";>;
float mColorV : CONTROLOBJECT<string name="WaveCircleController.pmx"; string item = "ColorAllV+";>;

static float mSpinCos = lerp(lerp(1, 5, mSpinCosP), 0, mSpinCosM);
static float mSpinSin = lerp(lerp(1, 0, mSpinSinP), 0, mSpinSinM);
static float mJitter = lerp(1, 100, mJitterP);

static float mRadius = lerp(lerp(0.3, 0.6, mRadiusP), 0.0, mRadiusM);
static float mIntensity = lerp(lerp(0.01, 0.1, mIntensityP), 0.0, mIntensityM);

static float2 mTranslate = float2(mPositionXP, mPositionYP) - float2(mPositionXM, mPositionYM);
static float3 mColorAll = float3(mColorH, mColorS, mColorV * 0.5);
#endif

texture SpectrumMap<string ResourceName = FFT_MAP_FILE;>; 
sampler SpectrumMapSamp = sampler_state
{
	texture = <SpectrumMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

float2 GetFramesPerSecond(float time, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	float frame = time / 8.5 * 255;

	float y = floor(frame / size);
	float x = frame - y * size;

	return float2(x, y * uniforms) / size;
}

float GetFramesFreq(float2 coord, float samples, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	int n = samples * (uniforms * 4 - 1);

	int x = int(floor(n / 4));
	int y = int(fmod(n, 4));

	float2 lookup = coord + x * float2(0, 1.0 / size);
	float4 freqs = tex2Dlod(SpectrumMapSamp, float4(lookup, 0, 0));

	return freqs[y];
}

void SoundSpectrumVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	out float4 oTexcoord  : TEXCOORD0,
	out float4 oPosition  : POSITION)
{
	oTexcoord = Texcoord;
	oTexcoord.zw = Texcoord.xy * ViewportSize;
	oTexcoord.xy += ViewportOffset.xy;
	oPosition = Position;
}

float4 SoundSpectrumPS(in float2 coord : TEXCOORD0) : COLOR 
{
	float2 index = GetFramesPerSecond(time);

	float2 wave = smoothstep(mTranslate, mTranslate + 1.0, coord) * 2 - 1;

	float4 color = 0;

	for (int i = 0.0 ; i < NUM_SAMPLES ; i++)
	{
		float freq = GetFramesFreq(index, i / float(NUM_SAMPLES) + time) * mIntensity;
		float rotate = float(i) / NUM_SAMPLES * PI_2;
		float dist = distance(wave, float2(cos(rotate * mSpinCos + time), sin(rotate * mSpinSin + time * 2.0 / 3.0)) * mRadius * (1 + freq * mJitter));

		float H = lerp(0, mColorAll.x, i / float(NUM_SAMPLES)) + time;
		float S = mColorAll.y;
		float V = (mColorAll.z / NUM_SAMPLES + freq) / dist;

		color.rgb += hsv2rgb(float3(H, S, V));
		color.a += V;
	}
	
	float3 screen = tex2Dlod(ScnSamp, float4(coord, 0, 0)).xyz;
	screen = lerp(screen, color.rgb, saturate(color.a));
	screen += color.rgb;

	return float4(screen, 1);
}

float Script : STANDARDSGLOBAL <
	string ScriptOutput = "color";
	string ScriptClass  = "scene";
	string ScriptOrder  = "postprocess";
> = 0.8;

const float4 ClearColor = float4(0,0,0,0);
const float ClearDepth  = 1.0;

technique MainTech<
	string Script = 
	"RenderColorTarget0=ScnMap;"
	"ClearSetColor=ClearColor;"
	"ClearSetDepth=ClearDepth;"
	"Clear=Color;"
	"Clear=Depth;"
	"ScriptExternal=Color;"

	"RenderColorTarget=;"
	"Pass=SoundSpectrum;"
;>{
	pass SoundSpectrum < string Script= "Draw=Buffer;"; > {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		ZEnable = False; ZWriteEnable = False;
		VertexShader = compile vs_3_0 SoundSpectrumVS();
		PixelShader  = compile ps_3_0 SoundSpectrumPS();
	}
}