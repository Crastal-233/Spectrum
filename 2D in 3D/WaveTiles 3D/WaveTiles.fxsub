#define FFT_SIZE 1024
#define FFT_UNIFORM 64

#define PI 3.141592654
#define PI_2 (3.141592654 * 2)

float time : TIME<bool SyncInEditMode=true;>;

float4x4 matWorld              : WORLD;
float4x4 matWorldInverse       : WORLDINVERSE;
float4x4 matWorldView          : WORLDVIEW;
float4x4 matWorldViewProject   : WORLDVIEWPROJECTION;
float4x4 matView               : VIEW;
float4x4 matViewInverse        : VIEWINVERSE;
float4x4 matProject            : PROJECTION;
float4x4 matProjectInverse     : PROJECTIONINVERSE;
float4x4 matViewProject        : VIEWPROJECTION;
float4x4 matViewProjectInverse : VIEWPROJECTIONINVERSE;

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float2 ViewportOffset  = (float2(0.5,0.5) / ViewportSize);
static float2 ViewportOffset2 = (float2(1.0,1.0) / ViewportSize);
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

texture SpectrumMap<string ResourceName = FFT_MAP_FILE;>; 
sampler SpectrumMapSamp = sampler_state
{
	texture = <SpectrumMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

#if USE_CUSTOM_PARAMS
static float mWaveHeight = waveHeight;
static float mWaveFade = waveBorderFade;
static float mWaveBlockNumX = waveBlockNumX;
static float mWaveBlockNumY = waveBlockNumY;

static float3 mWaveColorLow = waveColorLow;
static float3 mWaveColorHigh = waveColorHigh;

static float mBrightnessLow = waveBrightnessLow;
static float mBrightnessHigh = waveBrightnessHigh;
#else
float mPositionXP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "PosX+";>;
float mPositionYP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "PosY+";>;
float mPositionXM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "PosX-";>;
float mPositionYM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "PosY-";>;
float mSizeXP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "SizeW+";>;
float mSizeYP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "SizeH+";>;
float mSizeXM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "SizeW-";>;
float mSizeYM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "SizeH-";>;

float mWaveHeightP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "WaveHeight+";>;
float mWaveHeightM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "WaveHeight-";>;
float mWaveFadeP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "WaveFade+";>;
float mWaveFadeM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "WaveFade-";>;

float mBrightnessLowP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BrightnessLow+";>;
float mBrightnessLowM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BrightnessLow-";>;
float mBrightnessHighP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BrightnessHigh+";>;
float mBrightnessHighM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BrightnessHigh-";>;

float mBlockNumXP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockNumX+";>;
float mBlockNumXM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockNumX-";>;
float mBlockNumYP : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockNumY+";>;
float mBlockNumYM : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockNumY-";>;

float mBlockColorLowH : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorLowH+";>;
float mBlockColorLowS : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorLowS+";>;
float mBlockColorLowV : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorLowV-";>;
float mBlockColorHighH : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorHighH+";>;
float mBlockColorHighS : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorHighS+";>;
float mBlockColorHighV : CONTROLOBJECT<string name="WaveTilesController.pmx"; string item = "BlockColorHighV-";>;

static float mWaveHeight = lerp(lerp(1, 2, mWaveHeightP), 0, mWaveHeightM);
static float mWaveFade = lerp(lerp(0.0, 2.0, mWaveFadeP), 0.1, mWaveFadeM);
static float mWaveBlockNumX = lerp(lerp(100, 200, mBlockNumXP), 1, mBlockNumXM);
static float mWaveBlockNumY = lerp(lerp(100, 200, mBlockNumYP), 1, mBlockNumYM);
static float mBrightnessLow = lerp(lerp(0.3, 2, mBrightnessLowP), 0, mBrightnessLowM);
static float mBrightnessHigh = lerp(lerp(1, 2, mBrightnessHighP), 0, mBrightnessHighM);

static float2 mSize = lerp(lerp(1.0, 2.0, float2(mSizeXP, mSizeYP)), 0.0, float2(mSizeXM, mSizeYM));
static float2 mTranslate = lerp(lerp(0.0, 4.0, float2(mPositionXP, mPositionYP)), -4.0, float2(mPositionXM, mPositionYM));

#if USE_RGB_SPACE
static float3 mWaveColorLow = float3(mBlockColorLowH, mBlockColorLowS, mBlockColorLowV);
static float3 mWaveColorHigh = float3(mBlockColorHighH, mBlockColorHighS, mBlockColorHighV);
#else
static float3 mWaveColorLow = float3(mBlockColorLowH, mBlockColorLowS, 1 - mBlockColorLowV);
static float3 mWaveColorHigh = float3(mBlockColorHighH, mBlockColorHighS, 1 - mBlockColorHighV);
#endif

#endif

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

float2 GetFramesPerSecond(float time, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	float frame = time / 8.5 * 255;

	float y = floor(frame / size);
	float x = frame - y * size;

	return float2(x, y * uniforms) / size;
}

float GetFramesFreq(float2 coord, float samples, float size = FFT_SIZE, float uniforms = FFT_UNIFORM)
{
	int n = samples * (uniforms * 4 - 1);

	int x = int(floor(n / 4));
	int y = int(fmod(n, 4));

	float2 lookup = coord + x * float2(0, 1.0 / size);
	float4 freqs = tex2Dlod(SpectrumMapSamp, float4(lookup, 0, 0));

	return freqs[y];
}

float3 GenWaveBg(float2 coord, float3 blockColor, float size = 0.02)
{
	coord = (coord * 0.5 + 0.5) * float2(ViewportAspect, 1);
	
	float s1 = fmod(coord.x, 2.0 * size);
	float s2 = fmod(coord.y, 2.0 * size);

	s1 = step(size, s1);
	s2 = step(size, s2);

#if USE_RGB_SPACE
	return lerp(0.0, blockColor, s1 * s2) * 2;
#else
	return lerp(0.0, hsv2rgb(blockColor), s1 * s2) * 2;
#endif
}

float4 GenWave(float2 coord, float2 size)
{
	float2 index = GetFramesPerSecond(time);
	float2 tiles = size * float2(ViewportAspect, 1);

	float s1 = floor((coord.x * 0.5 + 0.5) * tiles.x);
	float s2 = floor((coord.y * 0.5 + 0.5) * tiles.y);

	float n1 = abs((s1 / tiles.x) * 2 - 1);
	float n2 = abs((s2 / tiles.y) * 2 - 1);

	float freq = GetFramesFreq(index, lerp(0.0, 1.0, n1));
	freq *= fmod(s1, 2);
	freq *= fmod(s2, 2);
	freq *= step(1 - saturate(freq * mWaveHeight), 1 - n2);
	freq = any(freq);

#if USE_RGB_SPACE
	return float4(lerp(mWaveColorHigh, mWaveColorLow, n1), freq);
#else
	return float4(hsv2rgb(lerp(mWaveColorHigh, mWaveColorLow, n1)), freq);
#endif
}

void SoundSpectrumVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	out float4 oTexcoord  : TEXCOORD0,
	out float4 oPosition  : POSITION)
{
	oTexcoord = Texcoord;
	oTexcoord.zw = Texcoord.xy * ViewportSize;
	oTexcoord.xy += ViewportOffset.xy;
	oPosition = mul(Position, matViewProject);
}

float4 SoundSpectrumPS(in float2 coord : TEXCOORD0) : COLOR 
{
	float2 wave = coord * 2 - 1;

	float4 color = GenWave(wave, float2(mWaveBlockNumX, mWaveBlockNumY));
	color.a *= pow(saturate((1 - abs(wave.x)) * (1 - abs(wave.y))), mWaveFade);
	color.a *= step(0.0, -wave.y) ? mBrightnessHigh : mBrightnessLow;
	clip(color.a - 1e-5);

	return color;
}

#define OBJECT_TEC(name, mmdpass)\
	technique name<string MMDPass = mmdpass;\
	>{\
		pass DrawObject {\
			AlphaTestEnable = FALSE; AlphaBlendEnable = true;\
			CullMode = NONE;\
			VertexShader = compile vs_3_0 SoundSpectrumVS();\
			PixelShader = compile ps_3_0 SoundSpectrumPS();\
		}\
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec<string MMDPass = "edge";>{}
technique ZplotTec<string MMDPass = "zplot";>{}
technique ShadowTech<string MMDPass = "shadow";>{}